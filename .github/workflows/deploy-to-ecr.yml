name: Deploy to ECR and EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1

jobs:
  deploy:
    name: Deploy to ECR and EC2
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push backend image to Amazon ECR
      env:
        ECR_REGISTRY: 642375200181.dkr.ecr.us-east-1.amazonaws.com
        ECR_REPOSITORY: image-editor-backend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Build, tag, and push frontend image to Amazon ECR
      env:
        ECR_REGISTRY: 642375200181.dkr.ecr.us-east-1.amazonaws.com
        ECR_REPOSITORY: image-editor-frontend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd frontend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    # Deploy to EC2 instances only on push to main (not on PRs)
    - name: Deploy Backend to EC2
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        ECR_REGISTRY: 642375200181.dkr.ecr.us-east-1.amazonaws.com
        ECR_REPOSITORY: image-editor-backend
      run: |
        # Get Backend EC2 instance IDs
        BACKEND_INSTANCES=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=image-editor-backend" \
                    "Name=instance-state-name,Values=running" \
          --query "Reservations[].Instances[].InstanceId" \
          --output text)
        
        if [ -z "$BACKEND_INSTANCES" ]; then
          echo "No running backend instances found"
          exit 0
        fi
        
        echo "Deploying to backend instances: $BACKEND_INSTANCES"
        
        # Send command to update and restart backend service
        aws ssm send-command \
          --instance-ids $BACKEND_INSTANCES \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=[
            "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin '$ECR_REGISTRY'",
            "docker pull '$ECR_REGISTRY'/'$ECR_REPOSITORY':latest",
            "systemctl restart backend",
            "sleep 5",
            "systemctl status backend"
          ]' \
          --comment "Deploy backend from GitHub Actions" \
          --output json

    - name: Deploy Frontend to EC2
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        ECR_REGISTRY: 642375200181.dkr.ecr.us-east-1.amazonaws.com
        ECR_REPOSITORY: image-editor-frontend
      run: |
        # Get Frontend EC2 instance IDs
        FRONTEND_INSTANCES=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=image-editor-frontend" \
                    "Name=instance-state-name,Values=running" \
          --query "Reservations[].Instances[].InstanceId" \
          --output text)
        
        if [ -z "$FRONTEND_INSTANCES" ]; then
          echo "No running frontend instances found"
          exit 0
        fi
        
        echo "Deploying to frontend instances: $FRONTEND_INSTANCES"
        
        # Send command to update and restart frontend service
        aws ssm send-command \
          --instance-ids $FRONTEND_INSTANCES \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=[
            "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin '$ECR_REGISTRY'",
            "docker pull '$ECR_REGISTRY'/'$ECR_REPOSITORY':latest",
            "systemctl restart frontend",
            "sleep 5",
            "systemctl status frontend"
          ]' \
          --comment "Deploy frontend from GitHub Actions" \
          --output json

    - name: Wait for deployments to complete
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "Waiting 30 seconds for deployments to complete..."
        sleep 30
        
        # Check backend instances health
        BACKEND_INSTANCES=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=image-editor-backend" \
                    "Name=instance-state-name,Values=running" \
          --query "Reservations[].Instances[].InstanceId" \
          --output text)
        
        if [ ! -z "$BACKEND_INSTANCES" ]; then
          echo "Checking backend deployment status..."
          for instance in $BACKEND_INSTANCES; do
            echo "Instance $instance status:"
            aws ssm send-command \
              --instance-ids $instance \
              --document-name "AWS-RunShellScript" \
              --parameters 'commands=["systemctl is-active backend"]' \
              --output text
          done
        fi
        
        # Check frontend instances health
        FRONTEND_INSTANCES=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=image-editor-frontend" \
                    "Name=instance-state-name,Values=running" \
          --query "Reservations[].Instances[].InstanceId" \
          --output text)
        
        if [ ! -z "$FRONTEND_INSTANCES" ]; then
          echo "Checking frontend deployment status..."
          for instance in $FRONTEND_INSTANCES; do
            echo "Instance $instance status:"
            aws ssm send-command \
              --instance-ids $instance \
              --document-name "AWS-RunShellScript" \
              --parameters 'commands=["systemctl is-active frontend"]' \
              --output text
          done
        fi