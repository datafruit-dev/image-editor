name: Deploy to EKS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      component:
        description: 'Component to deploy'
        required: true
        default: 'both'
        type: choice
        options:
          - backend
          - frontend
          - both

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 642375200181.dkr.ecr.us-east-1.amazonaws.com
  EKS_CLUSTER_NAME: image-editor-cluster
  NAMESPACE: image-editor

jobs:
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push backend image to Amazon ECR
      if: ${{ github.event.inputs.component == 'backend' || github.event.inputs.component == 'both' || github.event_name != 'workflow_dispatch' }}
      env:
        ECR_REPOSITORY: image-editor-backend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

    - name: Build, tag, and push frontend image to Amazon ECR
      if: ${{ github.event.inputs.component == 'frontend' || github.event.inputs.component == 'both' || github.event_name != 'workflow_dispatch' }}
      env:
        ECR_REPOSITORY: image-editor-frontend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd frontend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy-to-eks:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: build-and-push
    # Only deploy on push to main or manual trigger
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

    - name: Deploy Backend to EKS
      if: ${{ github.event.inputs.component == 'backend' || github.event.inputs.component == 'both' || github.event_name == 'push' }}
      run: |
        echo "🚀 Deploying backend to EKS..."
        
        # Apply the namespace first
        kubectl apply -f k8s/namespace.yaml
        
        # Update the backend deployment with the new image
        kubectl set image deployment/backend backend=${{ env.ECR_REGISTRY }}/image-editor-backend:${{ github.sha }} -n ${{ env.NAMESPACE }} || \
        kubectl apply -f k8s/backend-deployment.yaml
        
        # Wait for rollout to complete
        kubectl rollout status deployment/backend -n ${{ env.NAMESPACE }} --timeout=5m
        
        echo "✅ Backend deployment complete"

    - name: Deploy Frontend to EKS
      if: ${{ github.event.inputs.component == 'frontend' || github.event.inputs.component == 'both' || github.event_name == 'push' }}
      run: |
        echo "🚀 Deploying frontend to EKS..."
        
        # Apply the namespace first
        kubectl apply -f k8s/namespace.yaml
        
        # Update the frontend deployment with the new image
        kubectl set image deployment/frontend frontend=${{ env.ECR_REGISTRY }}/image-editor-frontend:${{ github.sha }} -n ${{ env.NAMESPACE }} || \
        kubectl apply -f k8s/frontend-deployment.yaml
        
        # Wait for rollout to complete
        kubectl rollout status deployment/frontend -n ${{ env.NAMESPACE }} --timeout=5m
        
        echo "✅ Frontend deployment complete"

    - name: Deploy Ingress
      run: |
        echo "🔧 Applying ingress configuration..."
        kubectl apply -f k8s/ingress.yaml
        
        # Wait for ingress to get an address
        echo "⏳ Waiting for ALB to be provisioned..."
        for i in {1..30}; do
          ALB_URL=$(kubectl get ingress image-editor-ingress -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)
          if [ ! -z "$ALB_URL" ]; then
            echo "✅ ALB provisioned: http://$ALB_URL"
            echo "ALB_URL=$ALB_URL" >> $GITHUB_ENV
            break
          fi
          echo "Waiting for ALB... (attempt $i/30)"
          sleep 10
        done

    - name: Verify Deployment
      run: |
        echo "🔍 Verifying deployment status..."
        
        # Check deployments
        echo "Deployments:"
        kubectl get deployments -n ${{ env.NAMESPACE }}
        
        # Check pods
        echo -e "\nPods:"
        kubectl get pods -n ${{ env.NAMESPACE }}
        
        # Check services
        echo -e "\nServices:"
        kubectl get services -n ${{ env.NAMESPACE }}
        
        # Check ingress
        echo -e "\nIngress:"
        kubectl get ingress -n ${{ env.NAMESPACE }}
        
        if [ ! -z "${{ env.ALB_URL }}" ]; then
          echo -e "\n✅ Application is available at: http://${{ env.ALB_URL }}"
        fi

    - name: Create deployment summary
      if: always()
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ **Deployment Status:** Success" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Deployment Status:** Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Cluster:** ${{ env.EKS_CLUSTER_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "**Namespace:** ${{ env.NAMESPACE }}" >> $GITHUB_STEP_SUMMARY
        echo "**Region:** ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
        echo "**Component:** ${{ github.event.inputs.component || 'both' }}" >> $GITHUB_STEP_SUMMARY
        
        if [ ! -z "${{ env.ALB_URL }}" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 Application URL" >> $GITHUB_STEP_SUMMARY
          echo "http://${{ env.ALB_URL }}" >> $GITHUB_STEP_SUMMARY
        fi